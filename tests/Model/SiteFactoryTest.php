<?php
namespace Rcm\Model;

require_once __DIR__ . '/../Base/BaseSite.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-07 at 22:13:18.
 */
class SiteFactoryTest extends \Rcm\Base\BaseSite
{
    /**
     * @var SiteFactory
     */
    protected $SiteFactory;

    protected $entityManagerMock;

    protected $languageData;

    protected $domainData;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $this->languageData = $this->getLanguageData();
        $this->domainData = $this->getDomainData();

        /** @var \Rcm\Entity\Site $site  */
        $site = $this->getSiteEntityForTests();

        $language = $site->getLanguage();
        $domain = $site->getDomain();

        $entityManagerMockParams = array(
            '\Rcm\Entity\Language' => array(
                'findOneBy' => $language
            ),

            '\Rcm\Entity\Domain' => array(
                'findOneBy' => $domain
            ),

            '\Rcm\Entity\Site' => array(
                'findOneBy' => $site
            )
        );

        $this->SiteFactory = new SiteFactory;
        $this->entityManagerMock = $this->getEmMock(
            $entityManagerMockParams
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Rcm\Model\SiteFactory::getEm
     * @covers Rcm\Model\SiteFactory::setEm
     * @covers Rcm\Model\FactoryAbstract::getEm
     * @covers Rcm\Model\FactoryAbstract::setEm
     */
    public function testGetAndSetEntityManager()
    {
        $this->SiteFactory->setEm($this->entityManagerMock);

        $this->assertInstanceOf(
            '\Doctrine\ORM\EntityManager',
            $this->SiteFactory->getEm()
        );
    }

    /**
     * @covers Rcm\Model\SiteFactory::getLanguage
     */
    public function testGetLanguageWithThreeDigits()
    {
        $this->SiteFactory->setEm($this->entityManagerMock);

        $language = $this->SiteFactory->getLanguage(
            $this->languageData['iso6392t']
        );

        $this->assertInstanceOf(
            '\Rcm\Entity\Language',
            $language
        );

        $this->assertEquals(
            $this->languageData['iso6392t'],
            $language->getIso6392t()
        );
    }

    /**
     * @covers Rcm\Model\SiteFactory::getLanguage
     */
    public function testGetLanguageWithTwoDigits()
    {
        $this->SiteFactory->setEm($this->entityManagerMock);

        $language = $this->SiteFactory->getLanguage(
            $this->languageData['iso6391']
        );

        $this->assertInstanceOf(
            '\Rcm\Entity\Language',
            $language
        );

        $this->assertEquals(
            $this->languageData['iso6391'],
            $language->getIso6391()
        );
    }

    /**
     * @covers Rcm\Model\SiteFactory::getLanguage
     * @covers Rcm\Exception\LanguageNotFoundException
     * @expectedException Rcm\Exception\LanguageNotFoundException
     */
    public function testNotFoundInGetLanguage()
    {
        $entityManagerMockParams = array(
            '\Rcm\Entity\Language' => array(
                'findOneBy' => null
            ),
        );

        $em = $this->getEmMock(
            $entityManagerMockParams
        );

        $this->SiteFactory->setEm($em);

        $this->SiteFactory->getLanguage(
            $this->languageData['iso6391']
        );

    }

    /**
     * @covers Rcm\Model\SiteFactory::getDomain
     * @covers Rcm\Exception\InvalidArgumentException
     * @expectedException \Rcm\Exception\InvalidArgumentException
     */
    public function testExceptionForNoDomainInGetDomain()
    {
        $this->SiteFactory->getDomain('');
    }

    /**
     * @covers Rcm\Model\SiteFactory::getDomain
     * @covers Rcm\Exception\RuntimeException
     * @expectedException \Rcm\Exception\RuntimeException
     */
    public function testExceptionForNoDomainFoundInGetDomain()
    {
        $entityManagerMockParams = array(
            '\Rcm\Entity\Domain' => array(
                'findOneBy' => null
            ),
        );

        $em = $this->getEmMock(
            $entityManagerMockParams
        );

        $this->SiteFactory->setEm($em);

        $this->SiteFactory->getDomain($this->domainData['domainName']);
    }

    /**
     * @covers Rcm\Model\SiteFactory::getDomain
     */
    public function testGetDomain()
    {
        $this->SiteFactory->setEm($this->entityManagerMock);

        $domains = $this->SiteFactory->getDomain(
            $this->domainData['domainName']
        )->getAdditionalDomains();

        $returnedDomain = $domains[0];

        $this->assertInstanceOf(
            '\Rcm\Entity\Domain',
            $returnedDomain
        );

        $this->assertEquals(
            $this->domainData['domainName'],
            $returnedDomain->getDomainName()
        );
    }

    /**
     * @covers Rcm\Model\SiteFactory::getDomain
     */
    public function testGetDomainWithPrimary()
    {
        $primaryDomainData = $this->getPrimaryDomainData();

        $language = new \Rcm\Entity\Language();
        $language->setLanguageId($this->languageData['languageId']);
        $language->setIso6392t($this->languageData['iso6392t']);
        $language->setIso6391($this->languageData['iso6391']);

        $domain = new \Rcm\Entity\Domain();
        $domain->setId($this->domainData['id']);
        $domain->setDomainName($this->domainData['domainName']);
        $domain->setDefaultLanguage($language);

        $primaryDomain = new \Rcm\Entity\Domain();
        $primaryDomain->setId($primaryDomainData['id']);
        $primaryDomain->setDomainName($primaryDomainData['domainName']);
        $primaryDomain->setDefaultLanguage($language);
        $primaryDomain->setAdditionalDomain($domain);

        $domain->setPrimary($primaryDomain);


        $entityManagerMockParams = array(
            '\Rcm\Entity\Language' => array(
                'findOneBy' => $language
            ),

            '\Rcm\Entity\Domain' => array(
                'findOneBy' => $domain
            ),
        );

        $em = $this->getEmMock(
            $entityManagerMockParams
        );

        $this->SiteFactory->setEm($em);

        $returnedDomain = $this->SiteFactory->getDomain(
            $this->domainData['domainName']
        );

        $this->assertInstanceOf(
            '\Rcm\Entity\Domain',
            $returnedDomain
        );

        $this->assertEquals(
            $primaryDomainData['domainName'],
            $returnedDomain->getDomainName()
        );
    }

    /**
     * @covers Rcm\Model\SiteFactory::getSite
     */
    public function testGetSite()
    {
        $site = $this->getSiteEntityForTests();
        $this->SiteFactory->setEm($this->entityManagerMock);

        $returnedSite = $this->SiteFactory->getSite(
            $site->getDomain()->getDomainName(),
            $site->getLanguage()->getIso6392t()
        );

        $this->assertInstanceOf(
            '\Rcm\Entity\Site',
            $returnedSite
        );

        $this->assertEquals(
            $site,
            $returnedSite
        );
    }

    /**
     * @covers Rcm\Model\SiteFactory::getSite
     */
    public function testGetSiteWithDefaultLanguage()
    {
        /** @var \Rcm\Entity\Site $site  */
        $site = $this->getSiteEntityForTests();

        $language = $site->getLanguage();
        $domain = $site->getDomain();

        $entityManagerMockParams = array(
            '\Rcm\Entity\Language' => array(
                'findOneBy' => null
            ),

            '\Rcm\Entity\Domain' => array(
                'findOneBy' => $domain
            ),

            '\Rcm\Entity\Site' => array(
                'findOneBy' => $site
            )
        );

        $em = $this->getEmMock(
            $entityManagerMockParams
        );

        $this->SiteFactory->setEm($em);

        $returnedSite = $this->SiteFactory->getSite(
            $site->getDomain()->getDomainName(),
            $site->getLanguage()->getIso6392t()
        );

        $this->assertInstanceOf(
            '\Rcm\Entity\Site',
            $returnedSite
        );

        $this->assertEquals(
            $site,
            $returnedSite
        );
    }

    /**
     * @covers Rcm\Model\SiteFactory::getSite
     * @covers Rcm\Exception\SiteNotFoundException
     * @expectedException Rcm\Exception\SiteNotFoundException
     */
    public function testNoSiteFoundForGetSite()
    {
        /** @var \Rcm\Entity\Site $site  */
        $site = $this->getSiteEntityForTests();

        $language = $site->getLanguage();
        $domain = $site->getDomain();

        $entityManagerMockParams = array(
            '\Rcm\Entity\Language' => array(
                'findOneBy' => null
            ),

            '\Rcm\Entity\Domain' => array(
                'findOneBy' => $domain
            ),

            '\Rcm\Entity\Site' => array(
                'findOneBy' => null
            )
        );

        $em = $this->getEmMock(
            $entityManagerMockParams
        );

        $this->SiteFactory->setEm($em);

        $this->SiteFactory->getSite(
            $site->getDomain()->getDomainName(),
            $site->getLanguage()->getIso6392t()
        );
    }

    /**
     * @covers Rcm\Model\SiteFactory::createNewSite
     */
    public function testCreateNewSite()
    {
        $site = $this->getSiteEntityForTests();
        $this->SiteFactory->setEm($this->entityManagerMock);

        $additionalDomains = $site->getDomain()->getAdditionalDomains();

        $returnedSite = $this->SiteFactory->createNewSite(
            $site->getDomain()->getDomainName(),
            $site->getCountry(),
            $site->getLanguage(),
            $site->getOwner(),
            $additionalDomains[0]->getDomainName()
        );

        $this->assertInstanceOf(
            '\Rcm\Entity\Site',
            $returnedSite
        );

        $this->assertEquals(
            $site->getOwner(),
            $returnedSite->getOwner()
        );

        $this->assertEquals(
            $site->getDomain()->getDomainName(),
            $returnedSite->getDomain()->getDomainName()
        );

        $returnedAdditionalDomain
            = $returnedSite->getDomain()->getAdditionalDomains();

        $this->assertEquals(
            $additionalDomains[0]->getDomainName(),
            $returnedAdditionalDomain[0]->getDomainName()
        );

        $this->assertInstanceOf(
            '\Rcm\Entity\PwsInfo',
            $returnedSite->getPwsInfo()
        );

        $this->assertEquals(
            $site->getOwner(),
            $returnedSite->getOwner()
        );

        $this->assertEquals(
            $site->getLanguage(),
            $returnedSite->getLanguage()
        );

        $this->assertEquals(
            $site->getCountry(),
            $returnedSite->getCountry()
        );

        $this->assertEquals(
            $site->getStatus(),
            $returnedSite->getStatus()
        );
    }







}
