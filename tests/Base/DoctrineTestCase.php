<?php

namespace Rcm\Tests\Base;

use Rcm\Tests\Base\RcmBootstrap;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-08 at 10:11:25.
 */
class DoctrineTestCase extends \PHPUnit_Framework_TestCase
{

    /** @var \Doctrine\Orm\EntityManager */
    public $entityManager;

    protected $expectedTables = array (
        'rcm_account',
        'rcm_addresses',
        'rcm_admin_allowed_sites',
        'rcm_admin_disallowed_pages',
        'rcm_admin_permissions',
        'rcm_admin_plugin_restrictions',
        'rcm_countries',
        'rcm_domains',
        'rcm_languages',
        'rcm_page_plugin_instances',
        'rcm_page_revisions',
        'rcm_page_revisions_instances',
        'rcm_pages',
        'rcm_phone_number',
        'rcm_plugin_assets',
        'rcm_plugin_instances',
        'rcm_plugin_instances_assets',
        'rcm_postal_codes',
        'rcm_sites',
        'rcm_sites_instances',
        'rcm_sites_pws_info',
        'rcm_states',
        'rcm_user'
    );

    public function setUp() {
        $serviceManager = RcmBootstrap::getServiceManager();
        $this->entityManager = $serviceManager->get('em');
        $this->setupConnection();
    }

    public function setupConnection()
    {
        // Clear Doctrine to be safe
        $this->entityManager->clear();

        // Schema Tool to process our entities
        $tool = new \Doctrine\ORM\Tools\SchemaTool($this->entityManager);
        $classes = $this->entityManager->getMetaDataFactory()->getAllMetaData();

        // Drop all classes and re-build them for each test case
        $tool->dropSchema($classes);
        $tool->createSchema($classes);
    }

    public function getDataSet() {
        return null;
    }

    public function testDbSetup() {

        $conn = $this->entityManager->getConnection()->getSchemaManager();

        $currentTables = $conn->listTableNames();

        foreach ($this->expectedTables as $table) {
            $this->assertTrue(in_array($table, $currentTables, false), $table.' Not found in db memory.');
        }

    }

    public function addExpectedDbTables($tables) {
        if (!is_array($tables)) {
            $this->expectedTables[] = $tables;
        } else {
            $this->expectedTables = array_merge($this->expectedTables, $tables);
        }
    }
}