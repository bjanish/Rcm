<?php
namespace Rcm\Entity;

require_once __DIR__ . '/../../src/Rcm/Entity/Domain.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-03 at 10:38:18.
 */
class DomainTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Domain
     */
    protected $primaryDomain;

    /**
     * @var Domain
     */
    protected $secondaryDomain;

    /**
     * @var Language
     */
    protected  $primaryLanguage;

    /**
     * @var mixed Dataset for Primary Domain name
     */
    protected $primaryDataSet;

    /**
     * @var mixed Dataset for Secondary Domain
     */
    protected $secondaryDataSet;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->primaryDomain = new Domain;
        $this->secondaryDomain = new Domain;
        $this->primaryLanguage = new Language;

        $this->primaryLanguage->setLanguageId(3);
        $this->primaryLanguage->setLanguageName('English');
        $this->primaryLanguage->setIso6391('en');
        $this->primaryLanguage->setIso6392b('eng');

        $this->primaryDataSet = array(
            'domainId' => 5,
            'domain' => 'phpunittest.com',
            'primaryDomain' => null,
            'additionalDomains' => array(),
            'defaultLanguage' => $this->primaryLanguage,
        );

        $this->secondaryDataSet = array(
            'domainId' => 5,
            'domain' => 'secondarytest.com',
            'primaryDomain' => null,
            'additionalDomains' => array(),
            'defaultLanguage' => $this->primaryLanguage,
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Rcm\Entity\Domain::__construct
     * @covers Rcm\Entity\Domain::getRawAdditionalDomains
     */
    public function testConstructor()
    {
        $this->assertInstanceOf(
            '\Doctrine\Common\Collections\ArrayCollection',
            $this->primaryDomain->getRawAdditionalDomains()
        );
    }

    /**
     * Tests Domain::setId & Domain::getId
     *
     * @covers Rcm\Entity\Domain::getId
     * @covers Rcm\Entity\Domain::setId
     */
    public function testGetAndSetId()
    {
        $this->primaryDomain->setId(5);
        $actual = $this->primaryDomain->getId();

        $this->assertEquals(5 , $actual);
    }

    /**
     * @covers Rcm\Entity\Domain::toArray
     */
    public function testToArrayPrimary()
    {
        $this->setupDomains();

        $expected = $this->getExpectedPrimary();

        $primaryActual = $this->primaryDomain->toArray();

        $this->assertEquals($expected, $primaryActual);
    }

    /**
     * @covers Rcm\Entity\Domain::toArray
     */
    public function testToArraySecondary()
    {
        $this->setupDomains();

        $expected = $this->getExpectedSecondary();

        $secondaryActual = $this->secondaryDomain->toArray();

        $this->assertEquals($expected, $secondaryActual);
    }

    /**
     * @covers Rcm\Entity\Domain::toArray
     * @covers Rcm\Entity\Domain::clearLanguageForUnitTests
     */
    public function testToArraySecondaryNoLanguage()
    {
        $this->setupDomains();

        $this->secondaryDomain->clearLanguageForUnitTests();

        $expected = $this->getExpectedSecondary();
        $expected['defaultLanguage'] = null;

        $secondaryActual = $this->secondaryDomain->toArray();

        $this->assertEquals($expected, $secondaryActual);
    }

    /**
     * @covers Rcm\Entity\Domain::isPrimary
     */
    public function testIsPrimaryForPrimaryDomain()
    {
        $this->setupDomains();
        $this->assertTrue($this->primaryDomain->isPrimary());
    }

    /**
     * @covers Rcm\Entity\Domain::isPrimary
     */
    public function testIsPrimaryForSecondaryDomain()
    {
        $this->setupDomains();
        $this->assertFalse($this->secondaryDomain->isPrimary());
    }

    /**
     * @covers Rcm\Entity\Domain::getDomainName
     * @covers Rcm\Entity\Domain::setDomainName
     */
    public function testGetAndSetDomainName()
    {
        $this->primaryDomain->setDomainName($this->primaryDataSet['domain']);
        $actual = $this->primaryDomain->getDomainName();
        $expected = $this->primaryDataSet['domain'];
        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers Rcm\Entity\Domain::setDomainName
     */
    public function testSetDomainName()
    {
        $this->primaryDomain->setDomainName($this->primaryDataSet['domain']);

        $expected = $this->primaryDataSet['domain'];
        $actual = $this->primaryDomain->getDomainName();

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers Rcm\Entity\Domain::setDomainName
     * @covers Rcm\Exception\InvalidArgumentException
     * @expectedException Rcm\Exception\InvalidArgumentException
     */
    public function testSetDomainNameWithFailure()
    {
        $this->primaryDomain->setDomainName('thisWillFail');
    }

    /**
     * @covers Rcm\Entity\Domain::getPrimary
     * @covers Rcm\Entity\Domain::setPrimary
     */
    public function testGetAndSetPrimary()
    {
        $this->setupPrimaryDomain();
        $this->secondaryDomain->setPrimary($this->primaryDomain);

        $primaryDomain = $this->secondaryDomain->getPrimary();

        $this->assertInstanceOf('\Rcm\Entity\Domain', $primaryDomain);

        $expectedData = $this->getExpectedPrimary(true);
        $actualData = $primaryDomain->toArray(false, true);

        $this->assertEquals($expectedData, $actualData);
    }

    /**
     * @covers Rcm\Entity\Domain::getAdditionalDomains
     */
    public function testGetAdditionalDomains($skipSetup=false)
    {
        if ($skipSetup === false) {
            $this->setupDomains();
        }

        $additionalDomains = $this->primaryDomain->getAdditionalDomains();

        $this->assertNotEmpty($additionalDomains);
        $this->assertTrue(is_array($additionalDomains));

        $additionalDomainToTest = $additionalDomains[0];

        $this->assertInstanceOf(
            '\Rcm\Entity\Domain',
            $additionalDomainToTest
        );

        $expectedData = $this->getExpectedSecondary();
        $actualData = $additionalDomainToTest->toArray();

        $this->assertEquals($expectedData, $actualData);
    }

    /**
     * @covers Rcm\Entity\Domain::setAdditionalDomain
     */
    public function testSetAdditionalDomain()
    {
        $this->setupPrimaryDomain();
        $this->setupSecondaryDomain();
        $this->secondaryDomain->setPrimary($this->primaryDomain);
        $this->primaryDomain->setAdditionalDomain($this->secondaryDomain);

        $this->testGetAdditionalDomains(true);
    }

    /**
     * @covers Rcm\Entity\Domain::domainIsValid
     */
    public function testDomainIsValidTrue()
    {
        $domain = $this->primaryDataSet['domain'];

        $this->assertTrue($this->primaryDomain->domainIsValid($domain));
    }

    /**
     * @covers Rcm\Entity\Domain::domainIsValid
     */
    public function testDomainIsValidFalse()
    {
        $this->assertFalse($this->primaryDomain->domainIsValid('thisWillFail'));
    }

    /**
     * @covers Rcm\Entity\Domain::setDefaultLanguage
     */
    public function testSetDefaultLanguage()
    {
        $this->primaryDomain->setDefaultLanguage($this->primaryLanguage);
        $this->testGetDefaultLanguage(true);
    }

    /**
     * @covers Rcm\Entity\Domain::getDefaultLanguage
     */
    public function testGetDefaultLanguage($skipSetup=false)
    {
        if ($skipSetup === false) {
            $this->setupDomains();
        }

        $defaultLanguage = $this->primaryDomain->getDefaultLanguage();

        $this->assertInstanceOf(
            '\Rcm\Entity\Language',
            $defaultLanguage
        );
    }

    private function setupDomains() {

        $this->setupPrimaryDomain();
        $this->setupSecondaryDomain();

        $this->primaryDomain->setAdditionalDomain(
            $this->secondaryDomain
        );

        $this->secondaryDomain->setPrimary($this->primaryDomain);

    }

    private function setupPrimaryDomain()
    {
        $this->primaryDomain->setId($this->primaryDataSet['domainId']);
        $this->primaryDomain->setDomainName($this->primaryDataSet['domain']);

        $this->primaryDomain->setPrimary(
            $this->primaryDataSet['primaryDomain']
        );

        $this->primaryDomain->setDefaultLanguage(
            $this->primaryLanguage
        );
    }

    private function setupSecondaryDomain()
    {
        $this->secondaryDomain->setId($this->secondaryDataSet['domainId']);
        $this->secondaryDomain->setDomainName(
            $this->secondaryDataSet['domain']
        );

        $this->secondaryDomain->setDefaultLanguage(
            $this->primaryLanguage
        );
    }

    private function getExpectedPrimary($skipAdditional=false)
    {
        $expectedPrimary = $this->primaryDataSet;
        $expectedPrimary['defaultLanguage']
            = $this->primaryDataSet['defaultLanguage']->getLanguage();

        $expectedPrimary['isPrimary'] = true;

        if ($skipAdditional === false) {
            $expectedPrimary['additionalDomains'][0]
                = $this->getExpectedSecondary(true);
        } else {
            unset($expectedPrimary['additionalDomains']);
        }

        return $expectedPrimary;
    }

    private function getExpectedSecondary($skipPrimary=false)
    {
        $expectedSecondary = $this->secondaryDataSet;
        $expectedSecondary['defaultLanguage']
            = $this->secondaryDataSet['defaultLanguage']->getLanguage();
        $expectedSecondary['isPrimary'] = false;

        if ($skipPrimary === false) {
            $expectedSecondary['primaryDomain'] = $this->getExpectedPrimary(true);
        } else {
            unset($expectedSecondary['primaryDomain']);
        }

        return $expectedSecondary;
    }
}
