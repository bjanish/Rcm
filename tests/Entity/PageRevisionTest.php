<?php
namespace Rcm\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-06 at 09:02:07.
 */
class PageRevisionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PageRevision
     */
    protected $PageRevision;

    /**
     * @var array Data to use for unit tests
     */
    protected $pageRevisionDataSet;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->PageRevision = new PageRevision;

        $this->pageRevisionDataSet = array(
            'pageRevId' => 765,
            'author' => 4057510001,
            'createdDate' => new \DateTime('2011-07-08 11:14:15'),
            'page' => new \Rcm\Entity\Page(),
            'pageTitle' => 'Page for unit tests',
            'description' => 'This is my page description',
            'keywords' => 'keywords, tests, unit testing, page revision',
            'pageLayout' => 'default',
            'pluginInstances' => array(
                new \Rcm\Entity\PluginInstance(),
                new \Rcm\Entity\PluginInstance(),
                new \Rcm\Entity\PluginInstance(),
            )
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Rcm\Entity\PageRevision::__construct
     * @covers Rcm\Entity\PageRevision::getRawPluginInstances
     */
    public function testConstructor()
    {
        $this->assertInstanceOf(
            '\Doctrine\Common\Collections\ArrayCollection',
            $this->PageRevision->getRawPluginInstances()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::getPageRevId
     * @covers Rcm\Entity\PageRevision::setPageRevId
     */
    public function testGetAndSetPageRevId()
    {
        $this->PageRevision->setPageRevId(
            $this->pageRevisionDataSet['pageRevId']
        );

        $this->assertEquals(
            $this->pageRevisionDataSet['pageRevId'],
            $this->PageRevision->getPageRevId()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::getAuthor
     * @covers Rcm\Entity\PageRevision::setAuthor
     */
    public function testGetAndSetAuthor()
    {
        $this->PageRevision->setAuthor(
            $this->pageRevisionDataSet['author']
        );

        $this->assertEquals(
            $this->pageRevisionDataSet['author'],
            $this->PageRevision->getAuthor()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::getCreatedDate
     * @covers Rcm\Entity\PageRevision::setCreatedDate
     */
    public function testGetAndSetCreatedDate()
    {
        $this->PageRevision->setCreatedDate(
            $this->pageRevisionDataSet['createdDate']
        );

        $this->assertEquals(
            $this->pageRevisionDataSet['createdDate'],
            $this->PageRevision->getCreatedDate()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::getPage
     * @covers Rcm\Entity\PageRevision::setPage
     */
    public function testGetAndSetPage()
    {
        $this->PageRevision->setPage(
            $this->pageRevisionDataSet['page']
        );

        $this->assertEquals(
            $this->pageRevisionDataSet['page'],
            $this->PageRevision->getPage()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::getPageTitle
     * @covers Rcm\Entity\PageRevision::setPageTitle
     */
    public function testGetAndSetPageTitle()
    {
        $this->PageRevision->setPageTitle(
            $this->pageRevisionDataSet['pageTitle']
        );

        $this->assertEquals(
            $this->pageRevisionDataSet['pageTitle'],
            $this->PageRevision->getPageTitle()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::getDescription
     * @covers Rcm\Entity\PageRevision::setDescription
     */
    public function testGetAndSetDescription()
    {
        $this->PageRevision->setDescription(
            $this->pageRevisionDataSet['description']
        );

        $this->assertEquals(
            $this->pageRevisionDataSet['description'],
            $this->PageRevision->getDescription()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::getKeywords
     * @covers Rcm\Entity\PageRevision::setKeywords
     */
    public function testGetAndSetKeywords()
    {
        $this->PageRevision->setKeywords(
            $this->pageRevisionDataSet['keywords']
        );

        $this->assertEquals(
            $this->pageRevisionDataSet['keywords'],
            $this->PageRevision->getKeywords()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::getPageLayout
     * @covers Rcm\Entity\PageRevision::setPageLayout
     */
    public function testGetAndSetPageLayout()
    {
        $this->PageRevision->setPageLayout(
            $this->pageRevisionDataSet['pageLayout']
        );

        $this->assertEquals(
            $this->pageRevisionDataSet['pageLayout'],
            $this->PageRevision->getPageLayout()
        );
    }

    /**
     * @covers Rcm\Entity\PageRevision::addInstances
     * @covers Rcm\Exception\RuntimeException
     *
     * @expectedException Rcm\Exception\RuntimeException
     */
    public function testThrowExceptionFromAddInstances()
    {
        $this->PageRevision->addInstances(null);
    }

    /**
     * @covers Rcm\Entity\PageRevision::getInstancesForDisplay
     */
    public function testGetIntacncesForDisplayWhenNull()
    {
        $this->assertNull(
            $this->PageRevision->getInstancesForDisplay()
        );
    }

}
