<?php
namespace Rcm\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-05 at 14:49:40.
 */
class LanguageTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Language
     */
    protected $object;

    /**
     * @var array Initial data to use for tests
     */
    protected $languageDataSet;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Language;

        $this->languageDataSet = array (
            'languageId' => '18',
            'languageName' => 'Chinese',
            'iso639_1' => 'zh',
            'iso639_2b' => 'chi',
            'iso639_2t' => 'zho',
            'oldWebLanguage' => 'old'
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Rcm\Entity\Language::setLanguageId
     * @covers Rcm\Entity\Language::getLanguageId
     */
    public function testGetAndSetLanguageId()
    {
        $this->object->setLanguageId($this->languageDataSet['languageId']);
        $this->assertEquals(
            $this->languageDataSet['languageId'],
            $this->object->getLanguageId()
        );
    }

    /**
     * @covers Rcm\Entity\Language::setLanguageName
     * @covers Rcm\Entity\Language::getLanguageName
     */
    public function testGetAndSetLanguageName()
    {
        $this->object->setLanguageName($this->languageDataSet['languageName']);
        $this->assertEquals(
            $this->languageDataSet['languageName'],
            $this->object->getLanguageName()
        );
    }

    /**
     * @covers Rcm\Entity\Language::setIso6391
     * @covers Rcm\Entity\Language::getIso6391
     */
    public function testGetAndSetIso6391()
    {
        $this->object->setIso6391($this->languageDataSet['iso639_1']);
        $this->assertEquals(
            $this->languageDataSet['iso639_1'],
            $this->object->getIso6391()
        );
    }

    /**
     * @covers Rcm\Entity\Language::setIso6392b
     * @covers Rcm\Entity\Language::getIso6392b
     */
    public function testGetAndSetIso6392b()
    {
        $this->object->setIso6392b($this->languageDataSet['iso639_2b']);
        $this->assertEquals(
            $this->languageDataSet['iso639_2b'],
            $this->object->getIso6392b()
        );
    }

    /**
     * @covers Rcm\Entity\Language::setIso6392t
     * @covers Rcm\Entity\Language::getIso6392t
     */
    public function testGetAndSetIso6392t()
    {
        $this->object->setIso6392t($this->languageDataSet['iso639_2t']);
        $this->assertEquals(
            $this->languageDataSet['iso639_2t'],
            $this->object->getIso6392t()
        );
    }

    /**
     * @covers Rcm\Entity\Language::setOldWebLanguage
     * @covers Rcm\Entity\Language::getOldWebLanguage
     */
    public function testGetAndSetOldWebLanguage()
    {
        $this->object->setOldWebLanguage(
            $this->languageDataSet['oldWebLanguage']
        );

        $this->assertEquals(
            $this->languageDataSet['oldWebLanguage'],
            $this->object->getOldWebLanguage()
        );
    }

    /**
     * @covers Rcm\Entity\Language::getLanguage
     */
    public function testGetLanguage()
    {
        $this->object->setIso6392t($this->languageDataSet['iso639_2t']);

        $this->assertEquals(
            $this->languageDataSet['iso639_2t'],
            $this->object->getLanguage()
        );
    }

    /**
     * @covers Rcm\Entity\Language::getLanguage
     */
    public function testGetLanguageWithIso6392bFailOver()
    {
        $this->object->setIso6392b($this->languageDataSet['iso639_2b']);

        $this->assertEquals(
            $this->languageDataSet['iso639_2b'],
            $this->object->getLanguage()
        );
    }

    /**
     * @covers Rcm\Entity\Language::getTwoDigit
     */
    public function testGetTwoDigit()
    {
        $this->object->setIso6391($this->languageDataSet['iso639_1']);
        $this->assertEquals(
            $this->languageDataSet['iso639_1'],
            $this->object->getTwoDigit()
        );
    }

    /**
     * @covers Rcm\Entity\Language::getThreeDigit
     */
    public function testGetThreeDigit()
    {
        $this->object->setIso6392t($this->languageDataSet['iso639_2t']);

        $this->assertEquals(
            $this->languageDataSet['iso639_2t'],
            $this->object->getThreeDigit()
        );
    }

    /**
     * @covers Rcm\Entity\Language::getThreeDigit
     */
    public function testGetThreeDigitWithIso6392bFailOver()
    {
        $this->object->setIso6392b($this->languageDataSet['iso639_2b']);

        $this->assertEquals(
            $this->languageDataSet['iso639_2b'],
            $this->object->getThreeDigit()
        );
    }

    /**
     * @covers Rcm\Entity\Language::toArray
     */
    public function testToArray()
    {
        $this->object->setLanguageId($this->languageDataSet['languageId']);
        $this->object->setLanguageName($this->languageDataSet['languageName']);
        $this->object->setIso6391($this->languageDataSet['iso639_1']);
        $this->object->setIso6392b($this->languageDataSet['iso639_2b']);
        $this->object->setIso6392t($this->languageDataSet['iso639_2t']);
        $this->object->setOldWebLanguage(
            $this->languageDataSet['oldWebLanguage']
        );

        $actual = $this->object->toArray();

        $this->assertEquals(
            $this->languageDataSet,
            $actual
        );
    }
}
