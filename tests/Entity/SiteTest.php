<?php
namespace Rcm\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-06 at 14:23:42.
 */
class SiteTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Site
     */
    protected $Site;

    private $siteDataSet;

    private $singlePageInfoForTests;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->Site = new Site;

        $language = new \Rcm\Entity\Language();
        $language->setLanguageId('2');
        $language->setIso6391('es');
        $language->setIso6392b('spn');
        $language->setIso6392t('esp');
        $language->setLanguageName('Spanish');
        $language->setOldWebLanguage('SP');

        $domain = new \Rcm\Entity\Domain();
        $domain->setId(45);
        $domain->setDomainName('relivunittest.com');
        $domain->setDefaultLanguage($language);

        $pwsInfo = new \Rcm\Entity\PwsInfo();
        $pwsInfo->setPwsId('23');

        $country = new \Rcm\Entity\Country();
        $country->setId(98);
        $country->setIso2('MX');
        $country->setIso3('MEX');
        $country->setSpecialApiCountry('ACK');
        $country->setOldWebCountry('US');

        $pluginInstanceOne = new \Rcm\Entity\PluginInstance();
        $pluginInstanceOne->setInstanceId(886577);
        $pluginInstanceOne->setSiteWide();
        $pluginInstanceOne->setPlugin(1);

        $pagePluginInstanceOne = new \Rcm\Entity\PagePluginInstance();
        $pagePluginInstanceOne->setInstance($pluginInstanceOne);
        $pagePluginInstanceOne->setLayoutContainer(2);
        $pagePluginInstanceOne->setRenderOrderNumber(8);
        $pagePluginInstanceOne->setPageInstanceId(886577);

        $pluginInstanceTwo = new \Rcm\Entity\PluginInstance();
        $pluginInstanceTwo->setInstanceId(886577);
        $pluginInstanceTwo->setPlugin(2);

        $pagePluginInstanceTwo = new \Rcm\Entity\PagePluginInstance();
        $pagePluginInstanceTwo->setInstance($pluginInstanceOne);
        $pagePluginInstanceTwo->setLayoutContainer(2);
        $pagePluginInstanceTwo->setRenderOrderNumber(8);
        $pagePluginInstanceTwo->setPageInstanceId(886577);

        $pageOneRevision = new \Rcm\Entity\PageRevision();
        $pageOneRevision->setPageRevId(9467);
        $pageOneRevision->setAuthor(90075);
        $pageOneRevision->setDescription('Unit test Page One');
        $pageOneRevision->setKeywords('Unit, Testing');
        $pageOneRevision->setPageLayout('SomeLayout');
        $pageOneRevision->setPageTitle('Page One Site Unit test');
        $pageOneRevision->addInstance($pagePluginInstanceOne);

        $pageOne = new \Rcm\Entity\Page();
        $pageOne->setPageId(231);
        $pageOne->setAuthor(7654567);
        $pageOne->setName('myPageOne');
        $pageOne->setCurrentRevision($pageOneRevision);
        $pageOne->addPageRevision($pageOneRevision);

        $pageOneRevision->setPage($pageOne);

        $pageTwoRevision = new \Rcm\Entity\PageRevision();
        $pageTwoRevision->setPageRevId(9167);
        $pageTwoRevision->setAuthor(80072);
        $pageTwoRevision->setDescription('Unit test Page Two');
        $pageTwoRevision->setKeywords('Unit, Testing, Page, Two');
        $pageTwoRevision->setPageLayout('SomeLayoutTwo');
        $pageTwoRevision->setPageTitle('Page Two Site Unit test');
        $pageTwoRevision->addInstance($pagePluginInstanceTwo);

        $pageTwo = new \Rcm\Entity\Page();
        $pageTwo->setPageId(231);
        $pageTwo->setAuthor(7654567);
        $pageTwo->setName('myPageOne');
        $pageTwo->setCurrentRevision($pageTwoRevision);
        $pageTwo->addPageRevision($pageTwoRevision);

        $pageTwoRevision->setPage($pageTwo);

        $this->singlePageInfoForTests = $pageTwo;

        $this->siteDataSet = array(
            'siteId' => '325',
            'owner' => 4057510001,
            'domain' => $domain,
            'pwsInfo' => $pwsInfo,
            'language' => $language,
            'country' => $country,
            'status' => 'A',
            'pages' => array (
                $pageOne->getName() => $pageOne,
                $pageTwo->getName() => $pageTwo,
            ),
            'sitePlugins' => array(
                $pluginInstanceOne,
            ),

        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->Site = null;
    }

    /**
     * @covers Rcm\Entity\Site::__construct
     * @covers Rcm\Entity\Site::getRawPluginInstances
     * @covers Rcm\Entity\Site::getRawPageInstances
     */
    public function testConstructor()
    {
        $this->assertInstanceOf(
            '\Doctrine\Common\Collections\ArrayCollection',
            $this->Site->getRawPluginInstances()
        );

        $this->assertInstanceOf(
            '\Doctrine\Common\Collections\ArrayCollection',
            $this->Site->getRawPageInstances()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getSiteId
     * @covers Rcm\Entity\Site::setSiteId
     */
    public function testGetAndSetSiteId()
    {
        $this->Site->setSiteId($this->siteDataSet['siteId']);

        $this->assertEquals(
            $this->siteDataSet['siteId'],
            $this->Site->getSiteId()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getOwner
     * @covers Rcm\Entity\Site::setOwner
     */
    public function testGetAndSetOwner()
    {
        $this->Site->setOwner($this->siteDataSet['owner']);

        $this->assertEquals(
            $this->siteDataSet['owner'],
            $this->Site->getOwner()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getDomain
     * @covers Rcm\Entity\Site::setDomain
     */
    public function testGetAndSetDomain()
    {
        $this->Site->setDomain($this->siteDataSet['domain']);

        $this->assertEquals(
            $this->siteDataSet['domain'],
            $this->Site->getDomain()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getPwsInfo
     * @covers Rcm\Entity\Site::setPwsInfo
     */
    public function testGetAndSetPwsInfo()
    {
        $this->Site->setPwsInfo($this->siteDataSet['pwsInfo']);

        $this->assertEquals(
            $this->siteDataSet['pwsInfo'],
            $this->Site->getPwsInfo()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getLanguage
     * @covers Rcm\Entity\Site::setLanguage
     */
    public function testGetAndSetLanguage()
    {
        $this->Site->setLanguage($this->siteDataSet['language']);

        $this->assertEquals(
            $this->siteDataSet['language'],
            $this->Site->getLanguage()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getCountry
     * @covers Rcm\Entity\Site::setCountry
     */
    public function testGetAndSetCountry()
    {
        $this->Site->setCountry($this->siteDataSet['country']);

        $this->assertEquals(
            $this->siteDataSet['country'],
            $this->Site->getCountry()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getStatus
     * @covers Rcm\Entity\Site::setStatus
     */
    public function testGetAndSetStatus()
    {
        $this->Site->setStatus($this->siteDataSet['status']);

        $this->assertEquals(
            $this->siteDataSet['status'],
            $this->Site->getStatus()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getPages
     * @covers Rcm\Entity\Site::addPage
     */
    public function testGetAndSetPages()
    {
        foreach ($this->siteDataSet['pages'] as $page) {
            $this->Site->addPage($page);
        }

        $this->assertEquals(
            $this->siteDataSet['pages'],
            $this->Site->getPages()
        );
    }

    /**
     * @covers Rcm\Entity\Site::getPageByName
     * @covers Rcm\Entity\Site::addPage
     */
    public function testGetPageByName()
    {
        foreach ($this->siteDataSet['pages'] as $page) {
            $this->Site->addPage($page);
        }

        /** @var \Rcm\Entity\Page $pageToCheck  */
        $pageToCheck = $this->singlePageInfoForTests;
        $pageNameToCheck = $pageToCheck->getName();

        $this->assertEquals(
            $pageToCheck,
            $this->Site->getPageByName($pageNameToCheck)
        );
    }

    /**
     * @covers Rcm\Entity\Site::getSiteWidePlugins
     * @covers Rcm\Entity\Site::addSiteWidePlugin
     */
    public function testGetAndAddSiteWidePlugin()
    {
        foreach ($this->siteDataSet['sitePlugins'] as $plugin) {
            $this->Site->addSiteWidePlugin($plugin);
        }

        $this->assertEquals(
            $this->siteDataSet['sitePlugins'],
            $this->Site->getSiteWidePlugins()
        );
    }

}